package com.project.controller;

import java.util.List; 

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RestController;

import com.project.config.JwtUtil;
import com.project.model.Recipes;
import com.project.model.Review;
import com.project.model.User;
import com.project.model.UserRecipe;
import com.project.service.RecipesService;
import com.project.service.ReviewService;
import com.project.service.UserService;
import com.project.service.ljmUserRecipeService;

import io.jsonwebtoken.Claims;

@CrossOrigin(origins = "http://localhost:5173")
@RestController
public class ReviewController {
	@Autowired
	private ReviewService reviewService;
	@Autowired
	private UserService userService;
	@Autowired
	private JwtUtil jwtUtil;
	@Autowired
	private RecipesService recipesService;
	@Autowired
	private ljmUserRecipeService ljmuserRecipeService;
	
	@GetMapping("/api/recipes/review/{id}")
	public List<Review> getAllReview(@PathVariable long id){
		return reviewService.getAllReview(id);
	}
	
	@GetMapping("/api/userrecipes/review/{id}")
	public List<Review> getAlluserReview(@PathVariable long id){
		return reviewService.getAllUserReview(id);
	}
	
	@PostMapping("/api/recipes/review")
	public Review addReview(@RequestHeader("Authorization") String token, @RequestBody Review review) {
		String jwtToken = token.startsWith("Bearer ") ? token.substring(7) : token;
	    Claims  claims;
        try {
            claims = jwtUtil.extractAllClaims(jwtToken); 
        } catch (Exception e) {
            throw new RuntimeException("유효하지 않은 토큰입니다.");
        }

        String email = claims.getSubject(); 

        if (email == null) {
            throw new RuntimeException("로그인이 필요합니다.");
        }
        User user = userService.getUserByEmail(email);
        Recipes recipe = recipesService.findById(review.getRecipesId());
        
        
        if (recipe != null) {
        	review.setUsersId(user.getId());  
            reviewService.addReview(review, user.getId());
            return review;
        } else {
            throw new RuntimeException("해당 레시피를 찾을 수 없습니다.");
        }
	}
	
	@PostMapping("/api/userrecipes/review")
	public Review addUserReview(@RequestHeader("Authorization") String token, @RequestBody Review review) {
		String jwtToken = token.startsWith("Bearer ") ? token.substring(7) : token;
		Claims claims;
		try {
			claims = jwtUtil.extractAllClaims(jwtToken);
		}catch(Exception e) {
			throw new RuntimeException("유효하지 않은 토큰입니다.");
		}
		
		String email = claims.getSubject();
		if(email == null) {
			throw new RuntimeException("로그인이 필요합니다.");
		}
		User user = userService.getUserByEmail(email);
		UserRecipe userRecipe =  ljmuserRecipeService.userRecipeById(review.getUserRecipesId());
		
		if( userRecipe != null) {
			review.setUsersId(user.getId());
			reviewService.addUserReview(review, user.getId());
			return review;
		}else {
			throw new RuntimeException("해당 레시피를 찾을 수 없습니다.");
		}
	}
	
	@PutMapping("/api/recipes/review/{id}")
	public Review putReview(@RequestHeader("Authorization") String token,@PathVariable long id, @RequestBody Review review) {
		String jwtToken = token.startsWith("Bearer ") ? token.substring(7) : token;
		Claims claims;
		try {
			claims = jwtUtil.extractAllClaims(jwtToken);
		}catch(Exception e) {
			throw new RuntimeException("유효하지 않은 토큰입니다.");
		}
		
		String email = claims.getSubject();
		
		if(email == null) {
			throw new RuntimeException("로그인이 필요합니다.");
		}
			User user = userService.getUserByEmail(email);
			Recipes recipe = recipesService.findByRecipeId(review.getRecipesId());
			
			if (review.getEmail() == null) {
		        review.setEmail(user.getEmail());
		    }
			
			if (!review.getEmail().equals(user.getEmail())) {
		        throw new RuntimeException("해당 사용자가 작성한 리뷰만 삭제할 수 있습니다.");
		    }
			review.setReviewId(id);
		    review.setUsersId(user.getId());  
		    reviewService.putReview(review, user.getEmail());
		    
		    return review;
	}
	
	@PutMapping("/api/userrecipes/review/{id}")
	public Review PutUserReview(@RequestHeader("Authorization") String token, @PathVariable long id, @RequestBody Review review) {
		String jwtToken = token.startsWith("Bearer ") ? token.substring(7) : token;
		Claims claims;
		try {
			claims = jwtUtil.extractAllClaims(jwtToken);
		}catch(Exception e) {
			throw new RuntimeException("유효하지 않은 토큰입니다.");
		}
		String email = claims.getSubject();
		if(email == null) {
			throw new RuntimeException("로그인이 필요합니다.");
		}
		User user = userService.getUserByEmail(email);
		UserRecipe userRecipe = ljmuserRecipeService.findByUserRecipeId(review.getUserRecipesId());
		
		if (review.getEmail() == null) {
	        review.setEmail(user.getEmail());
	    }
		
		if(review.getEmail() == null) {
			throw new RuntimeException("해당 사용자가 작성한 리뷰만 삭제할 수 있습니다.");
		}
		review.setReviewId(id);
		review.setUsersId(user.getId());
		reviewService.putUserReview(review, user.getEmail());
		
		return review;
	}
	
	
	@DeleteMapping("/api/recipes/review/{id}")
	public Review deleteReview(@RequestHeader("Authorization") String token, @PathVariable long id) {
	    String jwtToken = token.startsWith("Bearer ") ? token.substring(7) : token;
	    Claims claims;
	    try {
	        claims = jwtUtil.extractAllClaims(jwtToken);
	    } catch (Exception e) {
	        throw new RuntimeException("유효하지 않은 토큰입니다.");
	    }
	    
	    String email = claims.getSubject();
	    if (email == null) {
	        throw new RuntimeException("로그인이 필요합니다.");
	    }
	    
	    User user = userService.getUserByEmail(email);
	    Review review = reviewService.getReviewById(id);
	    
	    
	    if (!review.getEmail().equals(user.getEmail())) {
	        throw new RuntimeException("해당 사용자가 작성한 리뷰만 삭제할 수 있습니다.");
	    }

	    reviewService.deleteReview(id);
	    return review;
	}
	
	@DeleteMapping("/api/userrecipes/review/{id}")
	public Review deleteUserReview(@RequestHeader("Authorization") String token, @PathVariable long id) {
		String jwtToken = token.startsWith("Bearer ") ? token.substring(7) : token;
		Claims claims;
		try {
			claims = jwtUtil.extractAllClaims(jwtToken);
		}catch(Exception e) {
			throw new RuntimeException("유효하지 않은 토큰입니다.");
		}
		String email = claims.getSubject();
		if(email == null) {
			throw new RuntimeException("로그인이 필요합ㄴ디ㅏ.");
		}
		User user = userService.getUserByEmail(email);
		Review review = reviewService.getUserReviewById(id);
		
		if(!review.getEmail().equals(user.getEmail())){
				throw new RuntimeException("해당 사용자가 작성한 리뷰만 삭제할 수 있습니다.");
			}
		reviewService.deleteReview(id);
		return review;
		}
	
	@GetMapping("/api/recipe/review/count/{id}")
	public ResponseEntity<Map<String, Integer>> countRecipeReview(@PathVariable long id) {
	    int count = reviewService.countRecipeReview(id);
	    Map<String, Integer> response = new HashMap<>();
	    response.put("count", count);
	    return ResponseEntity.ok(response);
	}

	@GetMapping("/api/userrecipe/review/count/{id}")
	public ResponseEntity<Map<String, Integer>> countUserRecipeReview(@PathVariable long id) {
	    int count = reviewService.countUserRecipeReview(id);
	    Map<String, Integer> response = new HashMap<>();
	    response.put("count", count);
	    return ResponseEntity.ok(response);
	}
}