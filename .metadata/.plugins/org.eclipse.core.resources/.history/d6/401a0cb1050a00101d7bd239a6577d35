package com.project.controller;

import java.io.File;
import java.io.IOException;
import java.util.List;
import java.util.UUID;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.project.config.JwtUtil;
import com.project.model.User;
import com.project.model.UserRecipe;
import com.project.service.UserService;
import com.project.service.krhUserRecipeService;

import lombok.AllArgsConstructor;

@CrossOrigin(origins = "http://localhost:5173")
@AllArgsConstructor
@RestController
@RequestMapping("/api/urecipe")
public class krhUserRecipeController {
	
	@Autowired
	private krhUserRecipeService userRecipeService;
	
    @Autowired
    private JwtUtil jwtUtil; // JWT 유틸리티 클래스
	
	@Autowired
	private UserService userService;
	
	@PostMapping("/adduserrecipe")
	public ResponseEntity<String> addUserRecipe(
	        @RequestParam("foodName") String foodName,
	        @RequestParam("foodTime") int foodTime,
	        @RequestParam("foodImg") MultipartFile foodImg,
	        @RequestParam("categoryId") int categoryId,
	        @RequestParam(value = "step1", required = false) String step1,
            @RequestParam(value = "step2", required = false) String step2,
            @RequestParam(value = "step3", required = false) String step3,
            @RequestParam(value = "step4", required = false) String step4,
            @RequestParam(value = "step5", required = false) String step5,
            @RequestParam(value = "step6", required = false) String step6,
            @RequestParam(value = "stepImg1", required = false) MultipartFile stepImg1,
            @RequestParam(value = "stepImg2", required = false) MultipartFile stepImg2,
            @RequestParam(value = "stepImg3", required = false) MultipartFile stepImg3,
            @RequestParam(value = "stepImg4", required = false) MultipartFile stepImg4,
            @RequestParam(value = "stepImg5", required = false) MultipartFile stepImg5,
            @RequestParam(value = "stepImg6", required = false) MultipartFile stepImg6,
            @RequestParam("ingredientss")List<String> ingredients,
	        @RequestHeader("Authorization") String token) {
		    
	    // JWT 토큰에서 이메일 추출
	    String jwtToken = token.startsWith("Bearer ") ? token.substring(7) : token;
	    String email;
	    System.out.println(ingredients);
	    try {
	        // JWT에서 이메일 추출
	        email = jwtUtil.extractEmail(jwtToken);
	    } catch (Exception e) {
	        // 토큰이 잘못된 경우
	        return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body("유효하지 않은 토큰입니다.");
	    }
	    
	    // 이메일이 정상적으로 추출되지 않은 경우
	    if (email == null || email.isEmpty()) {
	        return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body("로그인이 필요합니다.");
	    }
	    
	    // 이메일로 사용자 정보 조회
	    User user = userService.getUserByEmail(email);
	    
	    // 사용자가 존재하지 않을 경우
	    if (user == null) {
	        return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body("사용자 정보를 찾을 수 없습니다.");
	    }
	    
	    // 사용자 ID 추출
	    long userId = user.getId();
	    
	    // UserRecipe 객체 설정
	    UserRecipe userRecipe = new UserRecipe();
	    userRecipe.setFoodName(foodName);
	    userRecipe.setFoodTime(foodTime);
	    userRecipe.setCategoryId(categoryId);
	    userRecipe.setStep1(step1);
	    userRecipe.setStep2(step2);
	    userRecipe.setStep3(step3);
	    userRecipe.setStep4(step4);
	    userRecipe.setStep5(step5);
	    userRecipe.setStep6(step6);
	    userRecipe.setUserId(userId);
	    System.out.println("categoryId: " + categoryId);
	    // 이미지 파일 처리 (각 스텝 이미지)
	    String uploadDir = System.getProperty("user.dir") + "/uploads/";
	    File dir = new File(uploadDir);
	    if (!dir.exists()) {
	        dir.mkdirs();  // 디렉토리가 없으면 생성
	    }
	    
	    // 각 스텝 이미지 파일 저장 처리
	    try {
	        String step1ImgFileName = saveFile(stepImg1, uploadDir);
	        String step2ImgFileName = saveFile(stepImg2, uploadDir);
	        String step3ImgFileName = saveFile(stepImg3, uploadDir);
	        String step4ImgFileName = saveFile(stepImg4, uploadDir);
	        String step5ImgFileName = saveFile(stepImg5, uploadDir);
	        String step6ImgFileName = saveFile(stepImg6, uploadDir);
	        String foodImgFileName= saveFile(foodImg, uploadDir);
	        
	        // 저장된 파일명만 설정 (파일 경로 대신)
	        userRecipe.setStepImg1(step1ImgFileName);
	        userRecipe.setStepImg2(step2ImgFileName);
	        userRecipe.setStepImg3(step3ImgFileName);
	        userRecipe.setStepImg4(step4ImgFileName);
	        userRecipe.setStepImg5(step5ImgFileName);
	        userRecipe.setStepImg6(step6ImgFileName);
	        userRecipe.setFoodImg(foodImgFileName);
	    } catch (IOException e) {
	        return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("파일 업로드 실패: " + e.getMessage());
	    }
	    
	    // 레시피와 재료 추가
	    try {
	    	System.out.println(ingredients);
	    	System.out.println("userRecipeService: " + userRecipeService); // null이면 문제 있음
	        userRecipeService.addUserRecipe(userRecipe, ingredients);
	        return ResponseEntity.ok("레시피가 성공적으로 등록되었습니다.");
	    } catch (Exception e) {
	    	e.printStackTrace();
	        return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("레시피 등록 중 오류가 발생했습니다.");
	    }
	}

	// 이미지 파일 저장하는 메서드
	private String saveFile(MultipartFile file, String uploadDir) throws IOException {
	    if (file != null && !file.isEmpty()) {
	        String fileName = UUID.randomUUID().toString() + "_" + file.getOriginalFilename();
	        File saveFile = new File(uploadDir + fileName);
	        file.transferTo(saveFile);
	        return fileName;  // 저장된 파일 경로 반환
	    }
	    return null;  // 파일이 없으면 null 반환
	}
	
}
